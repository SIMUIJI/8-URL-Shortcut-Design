version: "3" # 버전에 따라서 기능이 달라질수 있다고 합니다.

services: # 도커에서 사용하는 컨테이너를 정의
  load_balancer: #컨테이너 이름 생성
    image: nginx:stable-bookworm # 컨테이너 이미지
    restart: always # 언제 재 실행을 시켜줄것에 대한 값이다.
    tty: true # 터미널 기반 에뮬레이터 동자하게 하는법 -t
    stdin_open: true # -i 옵션으로 std out 등이 나오게 하는거
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/conf.d/api.conf
    ports: # 연결할 포트
      - "8080:80"
      - "443:443"
    networks: # 해당 컨테이너의 네트워크
      network: # 네트워크 이름
        ipv4_address: 172.19.0.2 # 네트워크 고정 아이피

  api1: #컨테이너 이름 생성
    image: debian:stable # 컨테이너 이미지
    restart: always # 언제 재 실행을 시켜줄것에 대한 값이다.
    tty: true # 터미널 기반 에뮬레이터 동자하게 하는법 -t
    stdin_open: true # -i 옵션으로 std out 등이 나오게 하는거
    depends_on:
      - master-0
      - slave-1
    volumes:
      - ./api1:/mnt
    command: >
     sh -c "/mnt/main"
    networks: # 해당 컨테이너의 네트워크
      network: # 네트워크 이름
        ipv4_address: 172.19.0.3 # 네트워크 고정 아이피

  api2: #컨테이너 이름 생성
    image: debian:stable # 컨테이너 이미지
    restart: always # 언제 재 실행을 시켜줄것에 대한 값이다.
    tty: true # 터미널 기반 에뮬레이터 동자하게 하는법 -t
    stdin_open: true # -i 옵션으로 std out 등이 나오게 하는거
    depends_on:
      - master-0
      - slave-1
    command: >
      sh -c "/mnt/main"
    volumes:
      - ./api2:/mnt
    networks: # 해당 컨테이너의 네트워크
      network: # 네트워크 이름
        ipv4_address: 172.19.0.4 # 네트워크 고정 아이피
  master-0:
    image: bitnami/postgresql-repmgr:14
    ports:
      - 15432:5432
    volumes:
      - ./data/master_db_script:/docker-entrypoint-initdb.d
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=snj
      - POSTGRESQL_USERNAME=snj
      - POSTGRESQL_PASSWORD=snj
      - POSTGRESQL_DATABASE=snj_db
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=master-0
      - REPMGR_PARTNER_NODES=master-0,slave-1
      - REPMGR_NODE_NAME=master-0
      - REPMGR_NODE_NETWORK_NAME=master-0
    networks:
      network:
        ipv4_address: 172.19.0.10 # 네트워크 고정 아이피
  slave-1:
    image: bitnami/postgresql-repmgr:14
    ports:
      - 25432:5432
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=snj
      - POSTGRESQL_USERNAME=snj
      - POSTGRESQL_PASSWORD=snj
      - POSTGRESQL_DATABASE=snj_db
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=master-0
      - REPMGR_PARTNER_NODES=master-0,slave-1
      - REPMGR_NODE_NAME=slave-1
      - REPMGR_NODE_NETWORK_NAME=slave-1
    networks:
      network:
        ipv4_address: 172.19.0.11 # 네트워크 고정 아이피
  pgpool:
    image: bitnami/pgpool:4
    ports:
      - 5432:5432
    depends_on:
      - master-0
      - slave-1
    environment:
      - PGPOOL_BACKEND_NODES=0:master-0:5432,1:slave-1:5432
      - PGPOOL_SR_CHECK_USER=snj
      - PGPOOL_SR_CHECK_PASSWORD=snj
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=snj
      - PGPOOL_POSTGRES_PASSWORD=snj
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
    healthcheck:
      test: [ "CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh" ]
      interval: 5s
      timeout: 5s
      retries: 2
    networks:
      network:
        ipv4_address: 172.19.0.6
  cache:
    image: redis:7.4.1-bookworm
    restart: always
    tty: true
    stdin_open: true
    command: redis-server --requirepass snj --port 6379
    ports:
        - 6379:6379
    networks:
      network:
        ipv4_address: 172.19.0.7


networks: # 네트워크 칸
  network: # 네트워크 이름
    external: # 외부의 네트워크를 가져오겠다는 이야기
      name: myapi # 외부 네트워크 이름
      # docker network create --gateway 172.19.0.1 --subnet 172.19.0.0/21 myapi